{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAqCA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAS,SAACC,EAASC,GAC5B,IAAMC,EAAgBC,KAAKC,SAAW,GAC1CC,YAAW,WACLH,EACFF,EAAS,CAACH,WAAUC,UAEpBG,EAAQ,CAACJ,WAAUC,S,GAEpBA,E,IA5CYQ,SAASC,cAAc,SAG/BC,iBAAiB,UAExB,SAAsBC,GACpBA,EAAIC,iBACJ,IAA+BC,EAAAF,EAAIG,cAAcC,SAA1CC,EAAwBH,EAAxBb,MAAOiB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAChBC,EAAaC,OAAOJ,EAAMK,OAC1BC,EAAYF,OAAOH,EAAKI,OACxBE,EAAcH,OAAOF,EAAOG,QAC7BF,EAAc,GAAKG,EAAY,GAAKC,EAAc,IACnD3B,EAAA4B,OAAOC,QAAQ,uCAEa,IAA1B,IAAIC,EAAI,EAAGA,GAAKH,EAAaG,GAAK,EAGtC5B,EAAc4B,EAFZP,GAAcG,GAGfK,MAAK,SAAAC,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MACjBJ,EAAA4B,OAAOK,QAAQ,uBAAwCC,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,OAC3D+B,QAAMC,IAAI,uBAAwCF,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAE3DiC,OAAM,SAAAL,G,IAAG7B,EAAQ6B,EAAR7B,SAAUC,EAAK4B,EAAL5B,MAClBJ,EAAA4B,OAAOC,QAAQ,sBAAqCK,OAAf/B,EAAS,QAAY+B,OAAN9B,EAAM,M,IAE5DW,EAAIG,cAAcoB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from \"notiflix\";\n\nconst formEl = document.querySelector('.form');\n\n\nformEl.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(evt){\n  evt.preventDefault();\n  const {delay, step, amount}  = evt.currentTarget.elements;\n  let delayValue = Number(delay.value);\n  let stepValue = Number(step.value);\n  let amountValue = Number(amount.value);\n  if(delayValue <  0 || stepValue < 0 || amountValue < 0){\n    Notify.failure('Будь ласка введіть позитивне число!');\n  }\n  for(let i = 1; i <= amountValue; i += 1){\n    delayValue += stepValue;\n  \n  createPromise(i, delayValue )\n  .then(({ position, delay }) => {\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`)\n  })\n  .catch(({ position, delay }) => {\n    Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  evt.currentTarget.reset();\n  }\n\n}\n\n\n\n\n\n\nfunction createPromise(position, delay) {\n  return new Promise ((resolve, reject) =>  {\n    const shouldResolve = Math.random() > 0.3;\nsetTimeout(() => {\n  if (shouldResolve) {\n    resolve ({position, delay})\n  } else {\n    reject ({position, delay})\n  }\n}, delay) \n  }) \n}\n\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","document","querySelector","addEventListener","evt","preventDefault","_elements","currentTarget","elements","delay1","step","amount","delayValue","Number","value","stepValue","amountValue","Notify","failure","i","then","param","success","concat","console","log","catch","reset"],"version":3,"file":"03-promises.7779fa57.js.map"}